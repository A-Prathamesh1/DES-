# Initial Permutation Matrix
IP = [58, 50, 42, 34, 26, 18, 10, 2,
      60, 52, 44, 36, 28, 20, 12, 4,
      62, 54, 46, 38, 30, 22, 14, 6,
      64, 56, 48, 40, 32, 24, 16, 8,
      57, 49, 41, 33, 25, 17, 9, 1,
      59, 51, 43, 35, 27, 19, 11, 3,
      61, 53, 45, 37, 29, 21, 13, 5,
      63, 55, 47, 39, 31, 23, 15, 7]

# Inverse Permutation Matrix
InvP = [40, 8, 48, 16, 56, 24, 64, 32,
        39, 7, 47, 15, 55, 23, 63, 31,
        38, 6, 46, 14, 54, 22, 62, 30,
        37, 5, 45, 13, 53, 21, 61, 29,
        36, 4, 44, 12, 52, 20, 60, 28,
        35, 3, 43, 11, 51, 19, 59, 27,
        34, 2, 42, 10, 50, 18, 58, 26,
        33, 1, 41, 9, 49, 17, 57, 25]

#Permutation made after each SBox substitution
P = [16, 7, 20, 21, 29, 12, 28, 17,
     1, 15, 23, 26, 5, 18, 31, 10,
     2, 8, 24, 14, 32, 27, 3, 9,
     19, 13, 30, 6, 22, 11, 4, 25]

# Initial permutation on key
PC_1 = [57, 49, 41, 33, 25, 17, 9,
        1, 58, 50, 42, 34, 26, 18,
        10, 2, 59, 51, 43, 35, 27,
        19, 11, 3, 60, 52, 44, 36,
        63, 55, 47, 39, 31, 23, 15,
        7, 62, 54, 46, 38, 30, 22,
        14, 6, 61, 53, 45, 37, 29,
        21, 13, 5, 28, 20, 12, 4]

# Permutation applied after shifting key (i.e gets Ki+1)
PC_2 = [14, 17, 11, 24, 1, 5, 3, 28,
        15, 6, 21, 10, 23, 19, 12, 4,
        26, 8, 16, 7, 27, 20, 13, 2,
        41, 52, 31, 37, 47, 55, 30, 40,
        51, 45, 33, 48, 44, 49, 39, 56,
        34, 53, 46, 42, 50, 36, 29, 32]

# Expand matrix to obtain 48bit matrix
E = [32, 1, 2, 3, 4, 5,
     4, 5, 6, 7, 8, 9,
     8, 9, 10, 11, 12, 13,
     12, 13, 14, 15, 16, 17,
     16, 17, 18, 19, 20, 21,
     20, 21, 22, 23, 24, 25,
     24, 25, 26, 27, 28, 29,
     28, 29, 30, 31, 32, 1]

# SBOX represented as a three dimentional matrix
# --> SBOX[block][row][column]
SBOX = [        
[
 [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
 [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
 [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
 [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],
],
[
 [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
 [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
 [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
 [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],
],
[
 [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
 [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
 [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
 [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],
],
[
 [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
 [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
 [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
 [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],
],  
[
 [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
 [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
 [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
 [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],
], 
[
 [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
 [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
 [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
 [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],
], 

[[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
 [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
 [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
 [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],
],
[
 [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
 [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
 [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
 [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],
]
]

# Shift Matrix for each round of keys
SHIFT = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]

def str_to_bitarray(s):
    # Converts string to a bit array.
    bitArr=[]
    for byte in s:
        bits = bin(ord(byte))[2:]  # Remove b
        while len(bits) < 8:
            bits = "0"+bits
        for bit in bits:
            bitArr.append(int(bit))
    return(bitArr)

def bitarray_to_str(bitArr):
    print("Bitarray_to_str: Converts bit array to string")
    s = "".join([str(bitArr[i]) for i in range(0, len(bitArr))])
    print("Binary String of Plain Text:",s)
    #str() : returns a string representaiosn of object 
    integer = int(s,2) #Return an integer object constructed from a number or string x
    print("Integer String of Binary Plain Text:",integer)
    return integer.to_bytes((integer.bit_length()+7)//8, 'big').decode('ascii')



class DES():
    def __init__(self):
        self.password = None
        self.plaintext = None
        self.keylist = list()
        #self.createKeys()

    def left_shift(self, a, b, round_num):
        # Shifts a list based on a round number
        num_shift = SHIFT[round_num]
        ### YOUR CODE HERE ###
        apart=[] ; bpart=[]
        apart = a[num_shift:] + a[:num_shift]
        bpart = b[num_shift:] + b[:num_shift]
        return (apart,bpart)
    
    def createKeys(self):
        # This functions creates the keys and stores them in keylist.
        # These keys should be generated using the password.
        ### YOUR CODE HERE ###
        print(self.password)
        str_bit = str_to_bitarray(self.password)
        print("str_bit: ",len(str_bit))
        key=[]
        listk1 = self.permute(str_bit,PC_1)
        apartk = listk1[:28]
        bpartk = listk1[28:]
        #left_shift(a, b, round_num)
        #        print("left_shift(apartk,bpartk,rno)",left_shift(apartk,bpartk,rno))
        for rno in range(0,16):
            left_circular_shift,Right_circular_shift  = self.left_shift(apartk,bpartk,rno)#left shifting return a+b
            #print("left: ",left_circular_shift,"Right: ",Right_circular_shift)
            
            apartk   = left_circular_shift
            bpartk   = Right_circular_shift
            circular_shift = left_circular_shift +  Right_circular_shift
            #print("circular_shift: ",circular_shift)
            key = self.permute(circular_shift,PC_2)
            print(key)
            self.keylist.append(key)
            key=[]
        print(self.keylist)
        return self.keylist

    def XOR(self, a, b):
        # xor function - This function is complete
        return [i^j for i,j in zip(a,b)]

    def performRound(self,left,right,a_round):
        # Performs a single round of the DES algorithm
        ### YOUR CODE HERE ###
        sec_part_expanPermut = self.permute(right,E)
        print("sec_part_expan/permut: ",sec_part_expanPermut,"len: ",len(sec_part_expanPermut))
              
        #print("Keylist[",round_num,"]:",self.keyset[i])
        fxord = self.XOR(sec_part_expanPermut, self.keylist[a_round])
        print("Fxord: ",fxord,"len: ",len(fxord))
        
        converted = self.sbox_substition(fxord)        
        print("Converted: ",converted,"Len: ",len(converted))
        
        fpermute = self.permute(converted,P)
        print("FOUT: ", fpermute , "len: ", len(fpermute))
        
        temp = str_to_bitarray(fpermute)
        print("temp: ",temp)
        
        print("apartPBT: ",left,"Len: ",len(left))
        Ri =  self.XOR(left, temp)
        
        print("Ri: ",Ri,"len: ",len(Ri))
        print("64 bit Round: ",a_round,"output: ")
        #tempbpartPBT = bpartPBT
        #for bit in Ri:
        #    tempbpartPBT.append(bit)
        #    print("64 bit output ",round_num," round: ",tempbpartPBT,"Len: ",len(tempbpartPBT))    
        return (right,Ri)

    def performRounds(self, text, keys):
        # This function is used by the encrypt and decypt functions.
        # keys - A list of keys used in the rounds
        # text - The orginal text that is converted.
        ### YOUR CODE HERE ###FSHIFT
        text=str_to_bitarray(text)
        print(text)
        list1 = text
        print("#permuted 64 bit binary text, Input to the round 1:",list1) 
        
        apartPBT = list1[:32]
        print("apartPBT: ",apartPBT,"len: ",len(apartPBT))
        
        bpartPBT = list1[32:]
        print("bpartPBT: ",bpartPBT,"len: ",len(bpartPBT))
        #roundout_array = [] # this list has outputs of each round to be fed to noext round
        for a_round in range(0,16):
            apartPBT,bpartPBT = self.performRound(apartPBT,bpartPBT,a_round)
            return apartPBT,bpartPBT
        
    def permute(self, bits, table):
        # Use table to permute the bits
        ### YOUR CODE HERE ###
        #count = 0
        permuted_pt =[]
        for pos in table:
            permuted_pt.append(bits[pos-1])
        return permuted_pt

    def sbox_substition(self, bits):
        # Apply sbox subsitution on the bits
        ### YOUR CODE HERE ###
         t = bits
         longkey = []
         tbits = []       
         count = 0
         temp = 0
            
         while count < 48:
             count += 6
             if count % 6 == 0:
                 row = int(  str ( t[count-1] ) + str( t[count-6]),2)#extracting rows and colomns
                 col = int(  str ( t[count-2] ) + str( t[count-3] ) + str( t[count-4] ) + str( t[count-5] ),2)
                 shortkey = SBOX[temp][row][col]
                 temp += 1
                 shortbinkey = bin(shortkey)
                 truncKey = shortbinkey[2:] 
                 truncKey = str(truncKey)
            
                 while len(truncKey) < 4:
                    truncKey = "0" + truncKey# Add additional 0's as needed            
            
             tbits.append(truncKey)
             print("truncKey: ", truncKey)
            
             for nibbles in tbits:
                 longkey += nibbles
                 print("longkey: ",longkey, "len: ", len(longkey))     
                 return longkey 
        
    def encrypt(self, key, plaintext):
        # Calls the performrounds function.
        #performRounds(self, text, keys)
        ### YOUR CODE HERE ###
        self.password=key
        self.createKeys()
        self.performRounds(plaintext,key)
        return
        
        
    def decrypt(self, key, ciphertext):
        # Calls the performrounds function.
        ### YOUR CODE HERE ###
        #performRounds(self, text, keys)
        return


if __name__ == '__main__':
    key = "blahblah"
    plaintext= "Hi world"
    des = DES()#creaeting the python class DES's object
    ciphertext = des.encrypt(key,plaintext)
    #text = des.decrypt(key,ciphertext)
    print(ciphertext)
    #print(text)

